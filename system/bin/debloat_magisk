#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
# > ENTER MAGISK MODULE ID HERE
ID="terminal_debloater"

#=========================== Set Log Files
# > Logs should go in this file
LOG=/magisk/${ID}/terminal.log
# > Verbose output goes here
VERLOG=/magisk/${ID}/verbose.log

#=========================== Start Logging verbosely
set -x 2>$VERLOG

#=========================== Set Busybox (Used by Magisk) up
# > Do not touch!
if [ -f /data/magisk/busybox ]; then
  alias busybox=/data/magisk/busybox
  for i in $(busybox --list); do
    if [ $i != 'echo' ]; then
      alias $i="/data/magisk/busybox $i"
    fi
  done
elif [ -f /data/data/com.topjohnwu.magisk/lib/libbusybox.so ]; then
  cp /data/data/com.topjohnwu.magisk/lib/libbusybox.so /cache/busybox
  chmod 755 /cache/busybox; chown 0.0 /cache/busybox
  alias busybox=/cache/busybox
  for i in $(busybox --list); do
    if [ $i != 'echo' ]; then
      alias $i="/cache/busybox $i"
    fi
  done  
else
  alias busybox=""
fi
if [ -x /system/xbin/busybox ]; then
  true
elif [ -x /system/bin/busybox ]; then
  true
elif [ -x /data/data/com.topjohnwu.magisk/busybox/busybox ]; then
  export PATH=$PATH:/data/data/com.topjohnwu.magisk/busybox
else
  echo "! Busybox not detected.."
  echo "Please install one (@osm0sis' busybox recommended)"
  false
fi
[ $? -ne 0 ] && exit $?

#=========================== Default Functions

# get_file_prop <property> <prop.file>
get_file_prop() {
  _prop=$(grep "$1=" $2)
  echo ${_prop#*=}
  unset _prop
}

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
  sed -i "s/${1}=.*/${1}=${2}/g" $3
}

# mktouch <file dir> <content>
mktouch() { 
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

# runl <cmd>
runl() {
  echo "[$(date +"%F %T")]: $@" >> $LOG 2>>$LOG
  $@ 2>>$LOG
  return $?
}

#=========================== Default Variables
# > Stuff here is used for some other stuff
# > Edit only if necessary!

# Magisk Mod Directory
MODDIR="/magisk/$ID"
# Version Number
VER=$(get_file_prop version $MODDIR/module.prop)
# Version Code
REL=$(get_file_prop versionCode $MODDIR/module.prop)
# Author
AUTHOR=$(get_file_prop author $MODDIR/module.prop)
# Mod Name/Title
MODTITLE=$(get_file_prop name $MODDIR/module.prop)

# Colors
G='\e[01;32m'    # GREEN
R='\e[01;31m'    # RED
Y='\e[01;33m'    # YELLOW
B='\e[01;34m'    # BLUE
V='\e[01;35m'    # VIOLET
Bl='\e[01;30m'   # BLACK
C='\e[01;36m'    # CYAN
W='\e[01;37m'    # WHITE
N='\e[00;37;40m' # How to use (example): echo "${G}example${N}"

# Divider (based on $MODTITLE, $VER, and $REL characters)
div="${Bl}$(printf '%*s' "$(($(echo $MODTITLE | wc -c)+$(echo $VER | wc -c)+$(echo $REL | wc -c)))" '' | sed 's/ /=/g')${N}"

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.


# Terminal Debloater
# by veez21
clear
echo "$div"
echo "${W}$MODTITLE $VER${N}${Bl}($REL)${N}"
echo "by ${W}$AUTHOR${N}"
echo "$div"

show_rein=0
if [ -d $MODDIR/system/app ]; then
  for i in $MODDIR/system/app/*; do
    if [ -f $i/.replace ]; then
      show_rein=1
      break
    fi
  done
elif [ -d $MODDIR/system/priv-app ]; then
  for i in $MODDIR/system/priv-app/*; do
    if [ -f $i/.replace ]; then
      show_rein=1
      break
    fi
  done
fi

use_aapt=0
[[ "$(which aapt)" ]] && let use_aapt=1

get_app_name() {
  if [ -x $MODDIR/aapt ] || [ -x /system/bin/aapt ] || [ -x /system/xbin/aapt ] || [ $use_aapt == 1 ]; then
    export PATH=$MODDIR:$PATH
    app_name=$(aapt dump badging $1/${name[$2]}.apk | grep 'application-label:' 2>/dev/null)
    if [ $? -gt 0 ]; then
      app_name[$2]=${name[$2]}
      return
    fi
    app_name=${app_name#*:}
    app_name[$2]=$(echo $app_name | tr ' ' '_' | tr -d "'")
  else
    app_name[$2]=${name[$2]}
  fi
}

list_system_app() {
  c=1
  x=1
  for i in $(ls /system/app); do
    app[$x]=/system/app/$i
    if [ ! -d $MODDIR${app[$x]} ]; then
      name[$x]=${i%/*}
      get_app_name ${app[$x]} $x
      c=$((c+1));x=$((x+1))
    fi
  done
}

list_system_priv-app() {
  c=1
  x=1
  for i in $(ls /system/priv-app); do
    privapp[$x]=/system/priv-app/$i
    if [ ! -d $MODDIR${privapp[$x]} ]; then
      name[$x]=${i%/*}
      get_app_name ${privapp[$x]} $x
      c=$((c+1));x=$((x+1))
    fi
  done
}

list_unin_app() {
  c=1
  if [ -d /system/app ] && [ -d $MODDIR/system/app ]; then
    for i in $(ls $MODDIR/system/app); do
      unin_app[$c]=$MODDIR/system/app/$i
      name_unin[$c]=$(cat $MODDIR/system/app/$i/.replace)
      if [ $? -gt 0 ] || [ -z ${name_unin[$c]} ] || [[ ! $(cat $MODDIR/system/app/$i/.replace) ]]; then
        name_unin[$c]=$i
      fi
      echo " $c - ${W}${name_unin[$c]}${N}" | tr '_' ' '
      c=$((c+1))
    done
  fi
  if [ -d /system/priv-app ] && [ -d $MODDIR/system/priv-app ]; then
    for i in $(ls $MODDIR/system/priv-app); do
      unin_app[$c]=$MODDIR/system/priv-app/$i
      name_unin[$c]=$(cat $MODDIR/system/priv-app/$i/.replace)
      if [ $? -gt 0 ] || [ -z ${name_unin[$c]} ] || [[ ! $(cat $MODDIR/system/priv-app/$i/.replace) ]]; then
        name_unin[$c]=$i
      fi
      echo " $c - ${W}${name_unin[$c]}${N}" | tr '_' ' '
      c=$((c+1))
    done
  fi
}

echo ""
if [ -d /system/app ]; then
  echo " 1 - ${W}System Apps${N}"
fi
if [ -d /system/priv-app ]; then
  echo " 2 - ${W}System Priv-Apps${N}"
fi
if [ $show_rein == 1 ]; then
  echo " 3 - ${W}Reinstall Uninstalled Apps${N}"
fi
echo " 0 - ${Bl}Exit${N}"
echo ""
echo -n "[CHOICE]: "
runl read choice
if [ "$choice" == "1" ]; then
  if [ -d /system/app ]; then
    clear
    echo "$div"
    echo "${W}System Apps${N}"
    echo "$div"
    echo ""
    echo "${W}Loading Apps...${N}"
    list_system_app 2>>$LOG
    c=1
    for i in $(seq 1 $((${#app_name[@]}-1))); do
      echo " $c - ${W}${app_name[$i]}${N}" | tr '_' ' '
      c=$((c+1))
    done
    echo ""
    echo " m - ${R}Uninstall Multiple${N}"
    echo " 0 - ${Bl}Exit${N}"
    echo "$div"
    echo -n "[CHOICE]: "
    runl read app
    if [ "$app" == m ]; then
      echo "Choose numbers listed above."
      echo "Do not repeat the same number."
      echo " 0 - Proceed to Uninstall choices"
      echo -n " > "
      c=1
      while runl read app; do
        if [ "$app" == 0 ]; then
          break
        fi
        echo "Add to Queue: ${R}${app_name[$app]}${N}" | tr '_' ' '
        multiple[$c]=$MODDIR${app[$app]}
        choice[$c]=$app
        c=$((c+1))
        busybox printf " > "
      done
      if [ "${#multiple[@]}" == 0 ]; then
        runl echo "No app chosen"
        runl exit 1
      else
        c=1
        for i in ${multiple[@]}; do
          runl echo "Uninstalling ${R}${app_name[${choice[$c]}]}${N}" | tr '_' ' '
          runl mktouch $i/.replace ${app_name[${choice[$c]}]}
          sleep 0.5
          c=$((c+1))
        done
        runl exit
      fi
    elif [ "$app" -gt ${#app[@]} ] || [ "$app" -lt 0 ] || [ "$app" == "" ] || [ -n "$(echo $app | tr -d '0-9')" ] ; then
      runl echo "Invalid"
      runl exit 1
    elif [ "$app" == "0" ]; then
      runl exit
    else
      runl echo "Uninstalling ${R}${app_name[$app]}${N}" | tr '_' ' '
      sleep 1
      runl mktouch $MODDIR${app[$app]}/.replace ${app_name[$app]}
      echo "Reboot to apply changes"
      runl exit
    fi
  else
    runl echo Invalid
    runl exit 1
	fi
elif [ "$choice" == 2 ]; then
  if [ -d /system/priv-app ]; then
    clear
    echo "$div"
    echo "${W}System Priv-Apps${N}"
    echo "$div"
    echo ""
    echo "${W}Loading Apps...${N}"
    list_system_priv-app 2>>$LOG
    c=1
    for i in $(seq 1 $((${#app_name[@]}-1))); do
      echo " $c - ${W}${app_name[$i]}${N}" | tr '_' ' '
      c=$((c+1))
    done
    echo ""
    echo " m - ${R}Uninstall Multiple${N}"
    echo " 0 - ${Bl}Exit${N}"
    echo "$div"
    echo -n "[CHOICE]: "
    runl read privapp
    if [ "$privapp" == m ]; then
      echo "Choose numbers listed above."
      echo "Do not repeat the same number."
      echo " 0 - Proceed to Uninstall choices"
      echo -n " > "
      c=1
      while runl read app; do
        if [ "$app" == 0 ]; then
          break
        fi
        echo "Add to Queue: ${R}${app_name[$app]}${N}" | tr '_' ' '
        multiple[$c]=$MODDIR${privapp[$app]}
        choice[$c]=$app
        c=$((c+1))
        busybox printf " > "
      done
      if [ "${#multiple[@]}" == 0 ]; then
        runl echo "No app chosen"
        runl exit 1
      else
        c=1
        for i in ${multiple[@]}; do
          runl echo "Uninstalling ${R}${app_name[${choice[$c]}]}${N}" | tr '_' ' '
          runl mktouch $i/.replace ${app_name[${choice[$c]}]}
          sleep 0.5
          c=$((c+1))
        done
        runl exit
      fi
    elif [ "$privapp" -gt ${#privapp[@]} ] || [ "$privapp" -lt 0 ] || [ "$privapp" == "" ] || [ -n "$(echo $privapp | tr -d '0-9')" ] ; then
      runl echo "Invalid"
      runl exit 1
    elif [ "$privapp" == "0" ]; then
      runl exit
    else
      runl echo "Uninstalling ${R}${app_name[$privapp]}${N}" | tr '_' ' ' 
      sleep 1
      runl mktouch $MODDIR${privapp[$privapp]}/.replace ${app_name[$privapp]}
      echo "Reboot to apply changes"
      runl exit
    fi
  else
    runl echo Invalid
    runl exit 1
  fi
elif [ "$choice" == 3 ]; then
  if [ $show_rein == 1 ]; then
    clear
    echo "$div"
    echo "${W}Reinstall${N}"
    echo "$div"
    echo ""
    list_unin_app
    echo " 0 - ${Bl}Exit${N}"
    echo ""
    echo -n "[CHOICE]: "
    read rein
    if [ "$rein" -gt ${#name_unin[@]} ] || [ "$rein" -lt 0 ] || [ "$rein" == "" ] || [ -n "$(echo $rein | tr -d '0-9')" ] ; then
      runl echo "Invalid"
      runl exit 1
    elif [ "$rein" == "0" ]; then
      runl exit
    else
      runl echo "Reinstalling ${G}${name_unin[$rein]}${N}" | tr '_' ' '
      sleep 1
      runl rm -rf ${unin_app[$rein]}
      echo "Reboot to apply changes"
      runl exit
    fi
  else
    runl echo "Invalid"
    runl exit 1
  fi

elif [ "$choice" == "0" ]; then
  runl exit 
else echo Invalid
  runl exit 1
fi

runl exit $?
